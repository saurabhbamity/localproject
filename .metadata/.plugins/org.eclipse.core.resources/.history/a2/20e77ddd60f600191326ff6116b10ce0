package com.test.concurrency.threadpoolexecutor;

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ConcurrentHashMap;

import com.sun.org.apache.xml.internal.serializer.utils.MsgKey;

public class ConsumerProducerExampleBlockingQueue {
	
	
	

}



class Message{
	
	int msgId;
	ConcurrentHashMap<Employee, String> keyValues;
	
	
	public int getMsgId() {
		return msgId;
	}
	public void setMsgId(int msgId) {
		this.msgId = msgId;
	}
	public ConcurrentHashMap<Employee, String> getKeyValues() {
		return keyValues;
	}
	public void setKeyValues(ConcurrentHashMap<Employee, String> keyValues) {
		this.keyValues = keyValues;
	}
	
}


class Producer implements Runnable{
	
	private BlockingQueue<Message> queue;
	
	Producer(BlockingQueue<Message> queue){
	
		this.queue=queue;
	}

	@Override
	public void run() {
	
		// code to create new msg each time 
		
		for (int i=0;i<10;i++)
		{
			int value=(int)(Math.random()*10)/5;
			
			
		}
		
	}
	
	
}


class Employee{
	
	
	private int empId;
	private String empName;
	
	
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getEmpName() {
		return empName;
	}
	public void setEmpName(String empName) {
		this.empName = empName;
	} 
	
}