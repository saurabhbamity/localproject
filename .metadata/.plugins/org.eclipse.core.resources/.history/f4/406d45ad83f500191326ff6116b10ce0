package com.test.mutithrading.executorframework;

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class CustomThreadPoolEmplemetation {
	
	
	public static void main(String[] args) {
		
	}

}


class CustomThreadPool
{
	
	private final int poolsize;
	
	//Internally pool is an array
    private final WorkerThread[] workers;
	
	private final BlockingQueue<Runnable>[] queue;
	
	public CustomThreadPool(int poolsize) {
		this.poolsize=poolsize;
		workingQueue= new LinkedBlockingQueue<>();
		
		for(int i=1;i<poolsize;i++)
		{
			workingQueue
		}
		
		class WorkerThread extends Thread {
	        public void run() {
	            Runnable task;
	 
	            while (true) {
	                synchronized (queue) {
	                    while (queue.isEmpty()) {
	                        try {
	                            queue.wait();
	                        } catch (InterruptedException e) {
	                            System.out.println("An error occurred while queue is waiting: " + e.getMessage());
	                        }
	                    }
	                    task = (Runnable) queue.poll();
	                }
	 
	                try {
	                    task.run();
	                } catch (RuntimeException e) {
	                    System.out.println("Thread pool is interrupted due to an issue: " + e.getMessage());
	                }
	            }
	        }
	    }
		
	}
	
	
	public void execute()
	{
		
	}
	
	
	
}



